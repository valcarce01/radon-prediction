install.packages("MASS")
install.packages("fda")
install.packages("splines")
install.packages("mgev")
install.packages("devtools")
install.packages("fda.usc")
library(fda.usc)
remove.packages("fda.usc")
library(devtools)
devtools::install_github("moviedo5/fda.usc")
library(fda.usc)
pkgbuild::check_build_tools(debug = TRUE)
library(devtools)
devtools::install_github("moviedo5/fda.usc")
devtools::install_github("moviedo5/fda.usc")
library(fda.usc)
data(aemet)
par(mfrow=c(1,2))
CanaryIslands <- ifelse(aemet$df$latitude < 31, 2, 4)
plot(aemet$df[,c("longitude","latitude")], col = CanaryIslands, lwd=2)
plot(temp, col = CanaryIslands, lwd=2)
aemet
names(aemet)
plot(aemet$temp, col = CanaryIslands, lwd=2)
lapply(aemet,class)
names(aemet$df)
lapply(aemet$temp,class)
temp <- aemet$temp
names(temp)
dim(temp)
length(argvals(temp))
rangeval(temp)
temp$names
temp
a
a <- 3
mdy("April 10, 2019")
install.packages("splusTimeDate")
mdy("April 10, 2019")
library(splusTimeDate)
mdy("April 10, 2019")
mdy(date("April 10, 2019"))
dmy
dmy()
ymd
iris
rename(iris)
clean_name
arrange
min(iris[1])
iris %>%
drop_na()
rename
rename()
library(sf)
pkgs <- c("sf", "sp", "starts", "gstat", "geoR", "spacetime", "sm", "fields",
"rgdal", "rgeos", "maps", "maptools", "ggplot2", "plot3D", "lattice",
"classInt", "viridis", "dplyr", "mapSpain", "tmap", "mapview",
"osmdata", "rnaturalearth", "ncdf", "quadprog", "spam", "DEoptim" )
install.packages(setdiff(pkgs, installed.packages()[,"Package"]), dependencies = TRUE)
install.packages(setdiff(pkgs, installed.packages()[, "Package"]), dependencies = TRUE)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc <- nc[c(5, 9:15)]
nc
str(nc)
# geom_name <- attr(nc, "sf_column")
# nc[, geom_name]; nc[[geom_name]]
# nc$geometry
st_geometry(nc)
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc
nc <- nc[c(5, 9:15)]
nc
str(nc)
# geom_name <- attr(nc, "sf_column")
# nc[, geom_name]; nc[[geom_name]]
# nc$geometry
st_geometry(nc)
plot(nc$geometry)
plot(nc$geometry[1])
plot(nc$geometry)
nc[1]
nc[1, ]
s4
methods(class="sf")
install.packages("devtools")
devtools::install_github("rubenfcasal/npsp")
p1 <- st_point(c(-8.395835, 43.37087))
p2 <- st_point(c(-7.555851, 43.01208))
p3 <- st_point(c(-7.864641, 42.34001))
p4 <- st_point(c(-8.648053, 42.43362))
sfc <- st_sfc(list(p1, p2, p3, p4))
cprov <- st_sf(names = c('Coruña (A)', 'Lugo', 'Ourense', 'Pontevedra'),
geom = sfc)
cprov
?st
#' Esta forma de proceder puede resultar de interés cuando se construyen geometrías tipo líneas o polígonos, pero en el caso de datos puntuales (las observaciones habituales en geoestadística), resulta mucho más cómodo emplear un `data.frame` que incluya las coordenadas en columnas y convertirlo a un objeto `sf` mediante la función `st_as_sf()`.
#'
#'
#' EJERCICIO 2.1
#' ---------------
#' Crear una geometría (un objeto `sfc`) formada por: dos puntos en las posiciones
#' (1,5) y (5,5), una línea entre los puntos (1,1) y (5,1), y un polígono, con vértices
#' {(0,0), (6,0), (6,6), (0,6), (0,0)} y con un agujero con vértices {(2,2), (2,4),
#' (4,4), (4,2), (2,2)} (NOTA: consultar la ayuda `?st`, puede resultar cómodo emplear
#' `matrix(... , ncol = 2, byrow = TRUE)`).
outer <- matrix(c(0, 0, 6, 0, 6, 6, 0, 6, 0, 0), ncol = 2, byrow = T)
hole <- matrix(c(2, 2, 2, 4, 4, 4, 4, 2, 2, 2), ncol = 2, byrow = T)
st_polygon(list(outer, hole))
poligono <- st_polygon(list(outer, hole))
plot(poligono)
st_point(c(1, 5))
p1 <- st_point(c(1, 5))
p1 <- st_point(c(5, 5))
p1 <- st_point(c(1, 5))
p2 <- st_point(c(5, 5))
st_linestring(list(p1, p2))
st_line_merge(list(p1, p2))
st_line_merge(list(p1)
)
st_line_merge(p1)
c(poligono, p1)
plot(c(poligono, p1))
st_geometrycollection(list(poligono, p1, p2))
plot(st_geometrycollection(list(poligono, p1, p2)))
outer <- matrix(c(0, 0, 6, 0, 6, 6, 0, 6, 0, 0), ncol = 2, byrow = T)
hole <- matrix(c(2, 2, 2, 4, 4, 4, 4, 2, 2, 2), ncol = 2, byrow = T)
poligono <- st_polygon(list(outer, hole))
plot(poligono)
p1 <- st_point(c(1, 5))
p2 <- st_point(c(5, 5))
?st_line_merge
?st_line_sample
l1 <- st_multilinestring(list(p1, p2))
l1 <- st_linestring(matrix(c(1, 5, 5, 5), ncol = 2, byrow = T))
plot(st_geometrycollection(list(poligono, p1, p2, l1)))
st_sfc(list(poligono, p1, p2, l1))
plot(st_sfc(list(poligono, p1, p2, l1)))
?anova
library(tseries)
library(fpp2)
library(TSA)
library(lubridate)
library(ggplot2)
?anova
setwd("~/radon-prediction/src")
library(ggplot2)
########################### time series load  #################################
serie <- read.csv("../data/radon-data.csv")
serie$time <- as_datetime(serie$time)
library(lubridate)
serie$time <- as_datetime(serie$time)
ggplot(serie, aes(x = time, y = radon)) +
geom_line() +
labs(x = "Time (10 minutes frequency)",
y = "Radon level (Bq/m³)",
color = "Legend")
ggsave("../figures/radon_complete_signal.png", width = 10, height = 5)
p1 <- ggplot(serie, aes(x = time, y = temperature)) + geom_line()
p2 <- ggplot(serie, aes(x = time, y = humidity)) + geom_line()
p3 <- ggplot(serie, aes(x = time, y = pressure)) + geom_line()
p4 <- ggplot(serie, aes(x = time, y = tvoc)) + geom_line()
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
p1 <- ggplot(serie, aes(x = time, y = temperature)) + geom_line()
p2 <- ggplot(serie, aes(x = time, y = humidity)) + geom_line()
p3 <- ggplot(serie, aes(x = time, y = pressure)) + geom_line()
p4 <- ggplot(serie, aes(x = time, y = tvoc)) + geom_line()
pdf("../figures/remaining_variables.pdf", width = 10, height = 5)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
p1 <- ggplot(serie, aes(x = time, y = temperature)) + geom_line()
p2 <- ggplot(serie, aes(x = time, y = humidity)) + geom_line()
p3 <- ggplot(serie, aes(x = time, y = pressure)) + geom_line()
p4 <- ggplot(serie, aes(x = time, y = tvoc)) + geom_line()
pdf("../figures/remaining_variables.png", width = 10, height = 5)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
p1 <- ggplot(serie, aes(x = time, y = temperature)) + geom_line()
p2 <- ggplot(serie, aes(x = time, y = humidity)) + geom_line()
p3 <- ggplot(serie, aes(x = time, y = pressure)) + geom_line()
p4 <- ggplot(serie, aes(x = time, y = tvoc)) + geom_line()
png("../figures/remaining_variables.png", width = 10, height = 5)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
?png
png("../figures/remaining_variables.png", width = 10, height = 5, units = "cm")
png("../figures/remaining_variables.png", width = 480, height = 480)
dev.off()
p1 <- ggplot(serie, aes(x = time, y = temperature)) + geom_line()
p2 <- ggplot(serie, aes(x = time, y = humidity)) + geom_line()
p3 <- ggplot(serie, aes(x = time, y = pressure)) + geom_line()
p4 <- ggplot(serie, aes(x = time, y = tvoc)) + geom_line()
png("../figures/remaining_variables.png", width = 480, height = 480)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
p1 <- ggplot(serie, aes(x = time, y = temperature)) + geom_line()
p2 <- ggplot(serie, aes(x = time, y = humidity)) + geom_line()
p3 <- ggplot(serie, aes(x = time, y = pressure)) + geom_line()
p4 <- ggplot(serie, aes(x = time, y = tvoc)) + geom_line()
png("../figures/remaining_variables.png", width = 3000, height = 1500)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
png("../figures/remaining_variables.png", width = 480, height = 240)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
png("../figures/remaining_variables.png", width = 960, height = 480)
gridExtra::grid.arrange(p1, p2, p3, p4, ncol=2)
dev.off()
# BoxPlot radon completo
ggplot(serie, aes(x = 1, y = radon)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1) +
theme(axis.text.x = element_blank()) +
labs(x = "Density",
y = "Radon level (Bq/m³)")
# 3. Violin plot of radon levels
ggplot(serie, aes(x = 1, y = radon)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1) +
theme(axis.text.x = element_blank()) +
labs(x = "Density",
y = "Radon level (Bq/m³)")
ggsave("../figures/radon_violin.png", width = 10, height = 5)
ggplot(serie[c(40000:40500), ], aes(x = time,
y = radon,
group = 1,
colour = state
)) +
geom_line() +
labs(x = "Time (10 minutes frequency)",
y = "Radon level (Bq/m³)",
color = "Ventilation status")
#################################### plots ####################################
# We fix the color for all the plots:
colors <- c("radon" = "black", "state" = "blue",
"On" = "red", "Off" = "black")
# 4. Ventilation influence
ggplot(serie[c(40000:40500), ], aes(x = time,
y = radon,
group = 1,
colour = state
)
) +
geom_line() +
labs(x = "Time (10 minutes frequency)",
y = "Radon level (Bq/m³)",
color = "Ventilation status") +
scale_color_manual(values = colors)
ggsave("../figures/radon_signal_ventilation_influence.png", width = 10, height = 5)
